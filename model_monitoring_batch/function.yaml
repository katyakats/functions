kind: job
metadata:
  name: model-monitoring-batch
  tag: ''
  hash: f778ae811ccbd5ea39252032de6b09737339a8d1
  project: default
  categories:
  - monitoring
spec:
  command: ''
  args: []
  image: mlrun/mlrun
  env: []
  default_handler: handler
  entry_points:
    compute:
      name: compute
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: capping
        default: null
      - name: kld_scaling
        default: 0.0001
      outputs:
      - default: ''
        type: float
      lineno: 64
    dict_to_histogram:
      name: dict_to_histogram
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: histogram_dict
        default: ''
      outputs:
      - default: ''
      lineno: 112
    compute_metrics_over_df:
      name: compute_metrics_over_df
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: base_histogram
        default: ''
      - name: latest_histogram
        default: ''
      outputs:
      - default: ''
      lineno: 129
    compute_drift_from_histograms:
      name: compute_drift_from_histograms
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: feature_stats
        default: ''
      - name: current_stats
        default: ''
      outputs:
      - default: ''
      lineno: 140
    post_init:
      name: post_init
      doc: ''
      parameters:
      - name: self
        default: ''
      outputs:
      - default: ''
      lineno: 284
    run:
      name: run
      doc: ''
      parameters:
      - name: self
        default: ''
      outputs:
      - default: ''
      lineno: 296
    check_for_drift:
      name: check_for_drift
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: drift_result
        default: ''
      - name: endpoint
        default: ''
      outputs:
      - default: ''
      lineno: 422
    get_last_created_dir:
      name: get_last_created_dir
      doc: ''
      parameters:
      - name: fs
        default: ''
      - name: endpoint_dir
        default: ''
      outputs:
      - default: ''
      lineno: 448
    handler:
      name: handler
      doc: ''
      parameters:
      - name: context
        type: MLClientCtx
        default: ''
      outputs:
      - default: ''
      lineno: 454
  description: ''
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/katyakats/functions.git#1b2d2571baeed7e8c7886d43e8188f9904740745:/Users/katyak/work/functions/model_monitoring_batch/model_monitoring_batch.py
    origin_filename: /Users/katyak/work/functions/model_monitoring_batch/model_monitoring_batch.py
  disable_auto_mount: false
  priority_class_name: ''
  affinity: null
verbose: false
