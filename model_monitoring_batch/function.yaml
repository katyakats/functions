kind: job
metadata:
  name: model-monitoring-batch
  tag: ''
  hash: 2b3c5e701c04134d76230535799a8442f1d4e1c1
  project: default
  categories:
  - monitoring
spec:
  command: ''
  args: []
  image: mlrun/mlrun
  env: []
  default_handler: handler
  entry_points:
    compute:
      name: compute
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: capping
        default: null
      - name: kld_scaling
        default: 0.0001
      outputs:
      - default: ''
        type: float
      lineno: 64
    dict_to_histogram:
      name: dict_to_histogram
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: histogram_dict
        default: ''
      outputs:
      - default: ''
      lineno: 112
    compute_metrics_over_df:
      name: compute_metrics_over_df
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: base_histogram
        default: ''
      - name: latest_histogram
        default: ''
      outputs:
      - default: ''
      lineno: 129
    compute_drift_from_histograms:
      name: compute_drift_from_histograms
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: feature_stats
        default: ''
      - name: current_stats
        default: ''
      outputs:
      - default: ''
      lineno: 140
    post_init:
      name: post_init
      doc: ''
      parameters:
      - name: self
        default: ''
      outputs:
      - default: ''
      lineno: 281
    run:
      name: run
      doc: ''
      parameters:
      - name: self
        default: ''
      outputs:
      - default: ''
      lineno: 293
    check_for_drift:
      name: check_for_drift
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: drift_result
        default: ''
      - name: endpoint
        default: ''
      outputs:
      - default: ''
      lineno: 419
    get_last_created_dir:
      name: get_last_created_dir
      doc: ''
      parameters:
      - name: fs
        default: ''
      - name: endpoint_dir
        default: ''
      outputs:
      - default: ''
      lineno: 445
    handler:
      name: handler
      doc: ''
      parameters:
      - name: context
        type: MLClientCtx
        default: ''
      outputs:
      - default: ''
      lineno: 451
  description: ''
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/katyakats/functions.git#4709a4cf94b5315f8a07a0b4bd4d2149339ad2b0:/Users/katyak/work/functions/model_monitoring_batch/model_monitoring_batch.py
    origin_filename: /Users/katyak/work/functions/model_monitoring_batch/model_monitoring_batch.py
  disable_auto_mount: false
  priority_class_name: ''
  affinity: null
verbose: false
